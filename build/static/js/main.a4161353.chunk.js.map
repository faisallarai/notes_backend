{"version":3,"sources":["components/Button.js","components/Note.js","services/notes.js","components/Notes.js","components/Header.js","components/Input.js","components/Form.js","components/Notification.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Button","handleClick","type","text","onClick","Note","note","toggleImportant","deleteNote","className","id","title","important","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notes","notes","showAll","setNotes","newNotes","filter","note_id","newNote","find","n","changedNote","noteService","returnedNote","map","catch","errror","console","log","message","key","window","confirm","error","Header","Input","handleNoteChange","value","onChange","Form","handleSubmit","onSubmit","Notification","messages","length","success","Footer","style","color","fontStyle","fontSize","App","useState","setNote","setShowAll","setMessages","useEffect","returnedNotes","errorr","newMessage","concat","event","preventDefault","date","Date","toISOString","Math","random","alert","setTimeout","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4161353.chunk.js","sourcesContent":["import React from 'react'\n\nconst Button = ({handleClick,type,text}) => <button onClick={handleClick} type={type}>{text}</button>\n\nexport default Button","import React from 'react'\nimport Button from './Button'\n\nconst Note = ({note, toggleImportant, deleteNote}) => {\n\n    return(\n        <tr className='note'>\n            <td>{note.id}</td>\n            <td>{note.title}</td>\n            <td>{note.important ? 'important' : 'not important'}</td>\n            <td><Button text={'X'} handleClick={() => deleteNote(note.id)} /></td>\n            <td><Button text={'toggle'} handleClick={() => toggleImportant(note.id)} /></td>\n        </tr>\n    )\n}\n\nexport default Note","import axios from 'axios'\n\nconst baseUrl = \"http://localhost:3001/notes\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    remove\n}","import React from 'react'\nimport Note from './Note'\nimport noteService from '../services/notes'\n\nconst Notes = ({notes, showAll, setNotes}) => {\n    // Creating a new note based on showAll\n    const newNotes = showAll ? notes : notes.filter(note => note.important)\n    \n\n    const toggleImportant = (note_id) => {\n        const newNote = notes.find(n => n.id === note_id)\n        const changedNote = {...newNote, important: !newNote.important}\n        noteService.update(note_id, changedNote).then(returnedNote => {\n            const newNotes = notes.map(note => note.id !== note_id ? note : returnedNote)\n            setNotes(newNotes)\n        }).catch(errror => {\n            console.log(errror.message)\n        })\n    }\n\n    const deleteNote = (note_id) => {\n        const note = notes.find(n => n.id === note_id)\n        if(window.confirm(`Delete ${note.title} ?`)){\n            noteService.remove(note_id).then(returnedNote => {\n                setNotes(notes.filter(n => n.id !== note_id))\n            }).catch(error => {\n                console.log(error)\n            })   \n        }\n             \n    }\n\n    const row = () => newNotes.map(note => <Note key={note.id} note={note} deleteNote={() => deleteNote(note.id)} toggleImportant={() => toggleImportant(note.id)} />)\n\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Title</th>\n                </tr>\n            </thead>\n            <tbody>\n                {row()}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Notes","import React from 'react'\n\nconst Header = ({title}) => {\n    return(\n        <h1>{title}</h1>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Input = ({handleNoteChange,value}) => <input onChange={handleNoteChange} value={value} />\n\nexport default Input","import React from 'react'\nimport Button from './Button'\nimport Input from './Input'\n\nconst Form = ({handleSubmit,handleNoteChange,note}) => {\n\n    return(\n      <form onSubmit={handleSubmit}>\n        <Input value={note} handleNoteChange={handleNoteChange} />\n        <Button type={'submit'} text={'Save'} />\n      </form>\n    )\n  }\n\nexport default Form","import React from 'react'\n\nconst Notification = ({messages}) => {\n  \n    if(messages.length === 0 ){\n      return []\n    }\n  \n    const newMessages = () => {\n      return messages.map(message => {\n        console.log(message)\n        if(message.success !== ''){\n          return(\n            <div>\n              <div className='success'>{message.success}</div>\n            </div>\n          )\n        }\n        if(message.error !== ''){\n          return(\n            <div>\n              <div className='error'>{message.error}</div>\n            </div>\n          )\n        }\n      })\n    }\n  \n    return(\n      <div>\n        {newMessages()}\n      </div>\n    )\n  \n  }\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n  \n    return(\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n      </div>\n    )\n  }\n\nexport default Footer","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport Notes from './components/Notes'\nimport Header from './components/Header'\nimport Button from './components/Button'\nimport Form from './components/Form'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [note, setNote] = useState('a new note')\n  const [showAll, setShowAll] = useState(true)\n  const [messages, setMessages] = useState([])\n\n  useEffect(() =>{\n    noteService.getAll().then(returnedNotes => {\n      setNotes(returnedNotes)\n    }).catch(errorr => {\n      const newMessage = {\n        error: errorr.message,\n        success: ''\n      }\n      setMessages(messages.concat(newMessage))\n    })\n  },[])\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNote(event.target.value)\n  }\n\n  const handleClick = () => {\n    const newShowAll = !showAll\n    setShowAll(newShowAll)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newNote = {\n      title: note,\n      date: new Date().toISOString(),\n      important: Math.random() * 0.5\n    }\n    \n    if(notes.filter(n => n.title === note).length > 0){\n      return alert(`The ${note} already exist`)\n    }\n\n    if(newNote.title === ''){\n      return alert(`The note cannot be empty`)\n    }\n\n    noteService.create(newNote).then(returnedNote => {\n      \n      setNotes(notes.concat(returnedNote))\n      setNote('')\n      const newMessage = {\n        error: '',\n        success: `${newNote.title} has been added to the list`\n      }\n      setMessages(messages.concat(newMessage))\n      setTimeout(() => {\n        setMessages([])\n      },3000)\n    }).catch(errorr => {\n      const newMessage = {\n        error: errorr.message,\n        success: ''\n      }\n      setMessages(messages.concat(newMessage))\n      setTimeout(() => {\n        setMessages([])\n      },3000)\n    })\n  }\n\n  return(\n    <div>\n      <Header title={'Notes'} />\n      <Notification messages={messages} />\n      <Button handleClick={handleClick} text=\"showAll\" />\n      <Notes notes={notes} showAll={showAll} setNotes={setNotes} />\n      <Form handleSubmit={handleSubmit} handleNoteChange={handleNoteChange} note={note} />\n      <Footer />\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}